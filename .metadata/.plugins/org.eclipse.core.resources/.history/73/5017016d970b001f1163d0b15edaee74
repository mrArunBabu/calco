import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

public class ArunCalculator implements ActionListener, KeyListener {
	JFrame jf;
    JLabel displayLabel;
    JButton sevenButton, eightButton, nineButton, sixButton, fiveButton, fourButton, threeButton, twoButton,
            oneButton, dotButton, zeroButton, equalButton, divisionButton, multiplicationButton, minusButton, additionButton,
            clearButton;
    String operator;
    boolean isOperatorClicked = false;
    String oldValue;

    public ArunCalculator() {
        jf = new JFrame("Arun's Calculator 1.0");
        jf.setLayout(null);
        jf.setSize(550, 600);
        jf.setLocation(200, 100);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        displayLabel = new JLabel();
        displayLabel.setBounds(30, 50, 480, 60);
        displayLabel.setBackground(Color.gray);
        displayLabel.setOpaque(true);
        displayLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        displayLabel.setForeground(Color.white);
        displayLabel.setFont(new Font("Arial", Font.PLAIN, 40));
        jf.add(displayLabel);

        // Initialize numeric buttons...
        sevenButton = new JButton("7");
        sevenButton.setBounds(30, 130, 80, 80);
        sevenButton.setFont(sevenButton.getFont().deriveFont(Font.BOLD, 60));
        sevenButton.setBackground(Color.GRAY);
        sevenButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        sevenButton.addActionListener(this);
        sevenButton.addKeyListener(this);
        jf.add(sevenButton);

        eightButton = new JButton("8");
        eightButton.setBounds(130, 130, 80, 80);
        eightButton.setFont(eightButton.getFont().deriveFont(Font.BOLD, 60));
        eightButton.setBackground(Color.GRAY);
        eightButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        eightButton.addActionListener(this);
        eightButton.addKeyListener(this);
        jf.add(eightButton);

        nineButton = new JButton("9");
        nineButton.setBounds(230, 130, 80, 80);
        nineButton.setFont(nineButton.getFont().deriveFont(Font.BOLD, 60));
        nineButton.setBackground(Color.GRAY);
        nineButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        nineButton.addActionListener(this);
        nineButton.addKeyListener(this);
        jf.add(nineButton);

        sixButton = new JButton("6");
        sixButton.setBounds(230, 230, 80, 80);
        sixButton.setFont(sixButton.getFont().deriveFont(Font.BOLD, 60));
        sixButton.setBackground(Color.GRAY);
        sixButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        sixButton.addActionListener(this);
        sixButton.addKeyListener(this);
        jf.add(sixButton);

        fiveButton = new JButton("5");
        fiveButton.setBounds(130, 230, 80, 80);
        fiveButton.setFont(fiveButton.getFont().deriveFont(Font.BOLD, 60));
        fiveButton.setBackground(Color.GRAY);
        fiveButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        fiveButton.addActionListener(this);
        fiveButton.addKeyListener(this);
        jf.add(fiveButton);

        fourButton = new JButton("4");
        fourButton.setBounds(30, 230, 80, 80);
        fourButton.setFont(fourButton.getFont().deriveFont(Font.BOLD, 60));
        fourButton.setBackground(Color.GRAY);
        fourButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        fourButton.addActionListener(this);
        fourButton.addKeyListener(this);
        jf.add(fourButton);

        threeButton = new JButton("3");
        threeButton.setBounds(230, 330, 80, 80);
        threeButton.setFont(threeButton.getFont().deriveFont(Font.BOLD, 60));
        threeButton.setBackground(Color.GRAY);
        threeButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        threeButton.addActionListener(this);
        threeButton.addKeyListener(this);
        jf.add(threeButton);

        twoButton = new JButton("2");
        twoButton.setBounds(130, 330, 80, 80);
        twoButton.setFont(twoButton.getFont().deriveFont(Font.BOLD, 60));
        twoButton.setBackground(Color.GRAY);
        twoButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        twoButton.addActionListener(this);
        twoButton.addKeyListener(this);
        jf.add(twoButton);

        oneButton = new JButton("1");
        oneButton.setBounds(30, 330, 80, 80);
        oneButton.setFont(oneButton.getFont().deriveFont(Font.BOLD, 60));
        oneButton.setBackground(Color.GRAY);
        oneButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        oneButton.addActionListener(this);
        oneButton.addKeyListener(this);
        jf.add(oneButton);

        zeroButton = new JButton("0");
        zeroButton.setBounds(130, 430, 80, 80);
        zeroButton.setFont(zeroButton.getFont().deriveFont(Font.BOLD, 60));
        zeroButton.setBackground(Color.GRAY);
        zeroButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        zeroButton.addActionListener(this);
        zeroButton.addKeyListener(this);
        jf.add(zeroButton);

        dotButton = new JButton(".");
        dotButton.setBounds(30, 430, 80, 80);
        dotButton.setFont(dotButton.getFont().deriveFont(Font.BOLD, 60));
        dotButton.setBackground(Color.GRAY);
        dotButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        dotButton.addActionListener(this);
        dotButton.addKeyListener(this);
        jf.add(dotButton);

        equalButton = new JButton("=");
        equalButton.setBounds(230, 430, 80, 80);
        equalButton.setFont(equalButton.getFont().deriveFont(Font.BOLD, 60));
        equalButton.setBackground(Color.GRAY);
        equalButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        equalButton.addActionListener(this);
        equalButton.addKeyListener(this);
        jf.add(equalButton);

        divisionButton = new JButton("/");
        divisionButton.setBounds(330, 130, 80, 80);
        divisionButton.setFont(divisionButton.getFont().deriveFont(Font.BOLD, 60));
        divisionButton.setBackground(Color.GRAY);
        divisionButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        divisionButton.addActionListener(this);
        divisionButton.addKeyListener(this);
        jf.add(divisionButton);

        multiplicationButton = new JButton("*");
        multiplicationButton.setBounds(330, 230, 80, 80);
        multiplicationButton.setFont(multiplicationButton.getFont().deriveFont(Font.BOLD, 60));
        multiplicationButton.setBackground(Color.GRAY);
        multiplicationButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        multiplicationButton.addActionListener(this);
        multiplicationButton.addKeyListener(this);
        jf.add(multiplicationButton);

        minusButton = new JButton("-");
        minusButton.setBounds(330, 330, 80, 80);
        minusButton.setFont(minusButton.getFont().deriveFont(Font.BOLD, 60));
        minusButton.setBackground(Color.GRAY);
        minusButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        minusButton.addActionListener(this);
        minusButton.addKeyListener(this);
        jf.add(minusButton);

        additionButton = new JButton("+");
        additionButton.setBounds(330, 430, 80, 80);
        additionButton.setFont(additionButton.getFont().deriveFont(Font.BOLD, 60));
        additionButton.setBackground(Color.GRAY);
        additionButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        additionButton.addActionListener(this);
        additionButton.addKeyListener(this);
        jf.add(additionButton);
        
        clearButton = new JButton("C");
        clearButton.setBounds(430, 430, 80, 80);
        clearButton.setFont(clearButton.getFont().deriveFont(Font.BOLD, 60));
        clearButton.setBackground(Color.GRAY);
        clearButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
        clearButton.addActionListener(this);
        clearButton.addKeyListener(this);
        jf.add(clearButton);

        // Make the frame visible after adding components
        jf.setVisible(true);
        displayLabel.requestFocusInWindow();
    }
     
    
    public static void main(String[]arg) {
    	SwingUtilities.invokeLater(() -> {
    	ArunCalculator calco = new ArunCalculator();
    	
    	});
    	
    }

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		char keyChar = e.getKeyChar();
		if(Character.isDigit(keyChar)) {
			handleNumericButton(String.valueOf(keyChar));
		}else if(keyChar == '+' || keyChar == '-' || keyChar == '*' || keyChar == '/' ) {
			handleOperatorButton(String.valueOf(keyChar));
	
		}else if(keyChar == KeyEvent.VK_ENTER) {
			handleResult();
		}else if(keyChar == KeyEvent.VK_BACK_SPACE) {
			String currentText = displayLabel.getText();
            if (!currentText.isEmpty()) {
                displayLabel.setText(currentText.substring(0, currentText.length() - 1));
            }
		}
		

	}

	


	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == sevenButton) {
			handleNumericButton("7");
		}else if(e.getSource() == eightButton) {
			handleNumericButton("8");
		}else if(e.getSource() == nineButton) {
			handleNumericButton("9");
		}else if(e.getSource() == fourButton) {
			handleNumericButton("4");
		}else if(e.getSource() == fiveButton) {
			handleNumericButton("5");
		}else if(e.getSource() == sixButton) {
			handleNumericButton("6");
		}else if(e.getSource() == threeButton) {
			handleNumericButton("3");
		}else if(e.getSource() == twoButton) {
			handleNumericButton("2");
		}else if(e.getSource() ==oneButton) {
			handleNumericButton("1");
		}else if(e.getSource() == zeroButton) {
			handleNumericButton("0");
		}else if(e.getSource() == dotButton) {
			handleDotButton();
		}else if(e.getSource() == multiplicationButton) {
			handleOperatorButton("*");
		}else if(e.getSource() == divisionButton) {
			handleOperatorButton("/");
		}else if(e.getSource() == minusButton) {
			handleOperatorButton("-");
		}else if(e.getSource() == additionButton) {
			handleOperatorButton("+");
		}else if(e.getSource() == equalButton) {
			handleResult();
		}else if(e.getSource() == clearButton) {
			handleClearButton();
		}
		//requestFocus();
	}
	//method to handle the button click on numeric buttons
	private void handleNumericButton(String number) {
		if(isOperatorClicked) {
		displayLabel.setText(number);
		isOperatorClicked = false;
	}else {
		displayLabel.setText(displayLabel.getText() + number);
	}
	}
	
//method to handle dot button click
	private void handleDotButton() {
	if(isOperatorClicked) {
		displayLabel.setText("0.");
		isOperatorClicked = false;
	}else {
		displayLabel.setText(displayLabel.getText() +".");
	}
	}
	//method to handle operator button clicks
	private void handleOperatorButton(String opr) {
		operator = opr;
		oldValue = displayLabel.getText();
		isOperatorClicked = true;
		displayLabel.setText(displayLabel.getText() + operator);
		
		if(oldValue.isEmpty()) {
			displayLabel.setText("Enter a number");
		}
	}
	
	//method to handle equalButton click
	private void handleResult() {
	    try {
	        String newValue = displayLabel.getText();
	        if (oldValue == null || oldValue.isEmpty()) {
	            displayLabel.setText("Error: Missing Operand");
	            return;
	        }
	        if (newValue.isEmpty()) {
	            displayLabel.setText("Error: Missing Operand");
	            return;
	        }
	        
	        // Convert number entered in the display to float
	        Float oldValueF = Float.parseFloat(oldValue);
	        Float newValueF = Float.parseFloat(newValue);
	        
	        // Calculate the value for different operators
	        Float result = null;
	        switch (operator) {
	            case "+":
	                result = oldValueF + newValueF;
	                break;
	            case "-":
	                result = oldValueF - newValueF;
	                break;
	            case "*":
	                result = oldValueF * newValueF;
	                break;
	            case "/":
	                if (newValueF == 0 || oldValueF == 0) {
	                    displayLabel.setText("Can't be divisible by zero");
	                } else {
	                    result = oldValueF / newValueF;
	                }
	                break;
	            default:
	                displayLabel.setText("Invalid operator");
	                return;
	        }
	        displayLabel.setText(Float.toString(result));
	    } catch (NumberFormatException ex) {
	        displayLabel.setText("Number format exception");
	    }
	}

	
	//method to handle clear button
	private void handleClearButton() {
		displayLabel.setText("");
	}
}
/*The problem you might be facing could be related to the usage of KeyListener in Swing components. Swing components tend to have a focus issue when using KeyListeners.
 *  Specifically, the component needs to be focused for KeyListeners to work correctly.
 */

/*In this program, the issue could arise because the JFrame itself is not the focused component when the application starts. Therefore, keyboard input might not be recognized until the JFrame is explicitly focused.

To fix this, you can set the focus to the JFrame explicitly when the application starts. You can do this by calling the requestFocus() method on the JFrame object after it's made visible. You can add requestFocus() method call at the end of the main() method, like this:

java

public static void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        Calculator calculator = new Calculator();
        calculator.setVisible(true);
        calculator.requestFocus(); // Set focus to the JFrame
    });
}

This should ensure that the JFrame is focused when the application starts, allowing keyboard input to work correctly from the beginning.
*/